variable "prefix" {
  type = string
  validation {
    condition = (
      length(var.prefix) <= 6
    )
    error_message = "Max length is 6 chars."
  }
}

variable "env" {
  type        = string
  description = "Environment"
}

variable "env_short" {
  type = string
  validation {
    condition = (
      length(var.env_short) <= 1
    )
    error_message = "Max length is 1 chars."
  }
}

variable "location" {
  type = string
}

variable "location_short" {
  type        = string
  description = "Location short like eg: neu, weu.."
}

variable "location_display_name" {
  type        = string
  description = "Location short like eg: neu, weu.."
}

variable "domain" {
  type = string
  validation {
    condition = (
      length(var.domain) <= 12
    )
    error_message = "Max length is 12 chars."
  }
}

#
# Networking
#
variable "cidr_subnet_synthetic_cae" {
  type        = list(string)
  description = "Address prefixes subnet synthetic"
}

variable "cidr_subnet_storage_private_endpoints" {
  type        = list(string)
  description = "Address prefixes subnet for storage private endpoints"
}

variable "cidr_subnet_container_app_private_endpoints" {
  type        = list(string)
  description = "Address prefixes subnet for container app private endpoints"
}

#
# DNS
#
variable "dns_zone_internal_prefix" {
  type        = string
  default     = null
  description = "The dns subdomain."
}

variable "external_domain" {
  type        = string
  description = "Domain for delegation"
}

#
# Monitoring
#
variable "monitoring_law_sku" {
  type        = string
  description = "Sku of the Log Analytics Workspace"
}

variable "monitoring_law_retention_in_days" {
  type        = number
  description = "The workspace data retention in days"
}

variable "monitoring_law_daily_quota_gb" {
  type        = number
  description = "The workspace daily quota for ingestion in GB."
}

## Synthetic Monitoring

variable "synthetic_storage_account_replication_type" {
  type        = string
  description = "(Required) table storage replication type"
}

variable "synthetic_self_alert_enabled" {
  type        = bool
  description = "(Optional) enables the alert on the function itself"
  default     = true
}

variable "synthetic_alerts_enabled" {
  type        = bool
  description = "(Optional) Enables alerts generated by the synthetic monitoring probe"
}

variable "synthetic_domain_tae_enabled" {
  type        = bool
  description = "(Optional) Enables the synthetic monitoring for the RTD"
}

variable "synthetic_domain_idpay_enabled" {
  type        = bool
  description = "(Optional) Enables the synthetic monitoring for the Idpay"
}

variable "synthetic_domain_mc_enabled" {
  type        = bool
  description = "(Optional) Enables the synthetic monitoring for the Idpay"
}

variable "synthetic_domain_shared_enabled" {
  type        = bool
  description = "(Optional) Enables the synthetic monitoring for the Idpay"
}

### ARGO
variable "argocd_helm_release_version" {
  type        = string
  description = "ArgoCD helm chart release version"
}

variable "argocd_force_reinstall_version" {
  type        = string
  description = "version to force reinstall ArgoCD"
}

variable "argocd_application_namespaces" {
  type        = list(string)
  description = "In which namespaces argocd can create applications"
}

variable "argocd_terraform_module_tier" {
    type        = string
    description = "Tier for argocd terraform module"
}

#---------------------------------------------------------------
# AKS
#---------------------------------------------------------------
variable "ingress_load_balancer_ip" {
  type = string
}

variable "k8s_kube_config_path_prefix" {
  type    = string
  default = "~/.kube"
}

#---------------------------------------------------------------
# InfluxDB & K6
#---------------------------------------------------------------
variable "influxdb2_helm" {
  type = object({
    chart_version = string,
    image = object({
      name = string,
      tag  = string
    })
    tolerations = optional(list(any), [])
    affinity    = optional(map(any), {})
  })
  description = "influxdb2 helm chart configuration"
}

variable "data_explorer_config" {
  type = object({
    sku = object({
      name     = string
      capacity = number
    })
    autoscale = object({
      enabled       = bool
      min_instances = number
      max_instances = number
    })
    public_network_access_enabled = bool
    double_encryption_enabled     = bool
    disk_encryption_enabled       = bool
    purge_enabled                 = bool
  })
  description = "Data explorer configuration"

}
