debug: false

serviceAccount:
  create: true
  name: ""
  extraAnnotations: {}

additionalAnnotations: {}
additionalLabels: {}

server:
  enabled: true
  sidecarContainers: []
  image:
    repository: temporalio/server
    tag: 1.25.2.0@sha256:94dcdf51920fe894acff78694ad84e2ec3611ae5852f936fcccc1b67ce44dff0
    pullPolicy: IfNotPresent

  replicaCount: 1

  metrics:
    annotations:
      enabled: true
    tags: {}
    excludeTags: {}
    serviceMonitor:
      enabled: true
      interval: 30s
      additionalLabels:
        release: prometheus
    prometheus:
      timerType: histogram

  deploymentLabels: {}
  deploymentAnnotations: {}
  podAnnotations: {}
  podLabels: {}
  secretLabels: {}
  secretAnnotations: {}

  resources:
    requests:
      cpu: "1"
      memory: "2Gi"
    limits:
      cpu: "2"
      memory: "4Gi"

  nodeSelector: {}
  tolerations: []
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/component
              operator: In
              values:
              - temporal-server
          topologyKey: kubernetes.io/hostname

  additionalVolumes: []
  additionalVolumeMounts: []
  additionalEnv: []

  securityContext:
    fsGroup: 1000
    runAsUser: 1000

  config:
    logLevel: "debug,info"
    numHistoryShards: 512

    persistence:
      defaultStore: default
      additionalStores: {}
      default:
        driver: "sql"
        sql:
          driver: "postgres12"
          host: "${postgres_host}"
          port: "${postgres_port}"
          database: "${postgres_database_name}"
#          user: "postgres_username"
#          password: "postgres_password"
          # for a production deployment use this instead of `password` and provision the secret beforehand e.g. with a sealed secret
          # it has a single key called `password`
          existingSecret: "${postgres_credential_secret_name}"
          maxConns: 20
          maxConnLifetime: "1h"
          tls:
            enabled: true
            enableHostVerification: true
#      cassandra:
#        driver: "cassandra"
#        cassandra:
#          tls:
#            enabled: true
#          hosts:
#            - "cassandra_hosts"
#          port: cassandra_port
#          keyspace: "temporal_keyspace"
#          user: "cassandra_user"
#          password: "cassandra_password"
#          existingSecret: ""
#          replicationFactor: 1
#          consistency:
#            default:
#              consistency: "local_quorum"
#              serialConsistency: "local_serial"

  frontend:
    service:
      annotations: {}
      type: ClusterIP
      port: 7233
      membershipPort: 6933
      httpPort: 7243
    
    ingress:
      enabled: true
      className: nginx
      annotations:
        nginx.ingress.kubernetes.io/backend-protocol: "GRPC"
        nginx.ingress.kubernetes.io/proxy-body-size: "20m"
        nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
        nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"

      # Hostname per il frontend
      hosts:
        - "${temporal_api_host}"

      # Configurazione TLS
      tls:
        - secretName: "${temporal_api_tls_secret_name}"
          hosts:
            - "${temporal_api_host}"

    metrics:
      annotations:
        enabled: true
      serviceMonitor: {}
      prometheus: {}

    resources:
      requests:
        cpu: "1"
        memory: "2Gi"
      limits:
        cpu: "2"
        memory: "4Gi"
    nodeSelector: {}
    tolerations: []
    affinity: {}
    additionalEnv: []
    containerSecurityContext: {}
    topologySpreadConstraints: []
    podDisruptionBudget: {}

  history:
    service:
      port: 7234
      membershipPort: 6934
    metrics:
      annotations:
        enabled: true
      serviceMonitor: {}
      prometheus: {}
    resources:
      requests:
        cpu: "1"
        memory: "2Gi"
      limits:
        cpu: "2"
        memory: "4Gi"
    additionalEnv: []
    additionalEnvSecretName: ""
    containerSecurityContext: {}
    topologySpreadConstraints: []
    podDisruptionBudget:
      maxUnavailable: 0

  matching:
    service:
      port: 7235
      membershipPort: 6935
    metrics:
      annotations:
        enabled: false
      serviceMonitor: {}
      prometheus: {}
    resources:
      requests:
        cpu: "1"
        memory: "2Gi"
      limits:
        cpu: "2"
        memory: "4Gi"
    additionalEnv: []
    containerSecurityContext: {}
    topologySpreadConstraints: []
    podDisruptionBudget:
      maxUnavailable: 0

  worker:
    service:
      port: 7239
      membershipPort: 6939
    metrics:
      annotations:
        enabled: true
      serviceMonitor: {}
      prometheus: {}
    resources:
      requests:
        cpu: "1"
        memory: "2Gi"
      limits:
        cpu: "2"
        memory: "4Gi"
    additionalEnv: []
    containerSecurityContext: {}
    topologySpreadConstraints: []
    podDisruptionBudget:
      maxUnavailable: 0

elasticsearch:
  enabled: true
  replicas: 1
  persistence:
    enabled: true
    storageClass: "managed-premium"
    size: 100Gi
  imageTag: 7.17.3
  host: elasticsearch-master-headless
  scheme: http
  port: 9200
  version: "v7"
  logLevel: "error"
  username: ""
  password: ""
  visibilityIndex: "temporal_visibility_v1_dev"

admintools:
  enabled: true
  image:
    repository: temporalio/admin-tools
    tag: 1.25.2-tctl-1.18.1-cli-1.1.1@sha256:da0c7a7982b571857173ab8f058e7f139b3054800abb4dcb100445d29a563ee8
    pullPolicy: IfNotPresent

web:
  enabled: true
  replicaCount: 1
  image:
    repository: temporalio/ui
    tag: 2.31.2@sha256:28bb3ea5a6ea3e09f16b521f32ab727c96470f7f1e420c66a6cbfb02001a8aa2
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP
    port: 8080
    annotations: {}

  ingress:
    enabled: true
    className: nginx
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
      nginx.ingress.kubernetes.io/proxy-body-size: "20m"
    hosts:
      - "${temporal_web_host}"
    tls:
      - secretName: "${temporal_web_tls_secret_name}"
        hosts:
          - "${temporal_web_host}"

  resources:
    requests:
      cpu: "500m"
      memory: "512Mi"
    limits:
      cpu: "1"
      memory: "1Gi"

schema:
  createDatabase:
    enabled: true
  setup:
    enabled: true
    backoffLimit: 100
  update:
    enabled: true
    backoffLimit: 100

cassandra:
  enabled: false

prometheus:
  enabled: false

grafana:
  enabled: false

topologySpreadConstraints:
- maxSkew: 1
  topologyKey: kubernetes.io/hostname
  whenUnsatisfied: ScheduleAnyway
  labelSelector:
    matchLabels:
      app.kubernetes.io/component: temporal-server
